main = "Null distribution of test-statistic",
xlab = "Test-statistic",
col = alpha("blue", 0.4))
?hist
par(mfrow=c(1,1))
hist(permu$perm_statistics,
main = "Null distribution of test-statistic",
xlab = "Test-statistic",
col = alpha("blue", 0.4),
breaks = c(-2,-1,0,1,2,3,4))
par(mfrow=c(1,1))
hist(permu$perm_statistics,
main = "Null distribution of test-statistic",
xlab = "Test-statistic",
col = alpha("blue", 0.4),
breaks = c(-3,-2,-1,0,1,2,3,4))
par(mfrow=c(1,1))
hist(permu$perm_statistics,
main = "Null distribution of test-statistic",
xlab = "Test-statistic",
col = alpha("blue", 0.4),
breaks = c(-3,-2,-1,0,1,2,3,4,5))
abline(v = 5)
par(mfrow=c(1,1))
hist(permu$perm_statistics,
main = "Null distribution of test-statistic",
xlab = "Test-statistic",
col = alpha("blue", 0.4),
breaks = c(-3,-2,-1,0,1,2,3,4,5,6))
par(mfrow=c(1,1))
hist(permu$perm_statistics,
main = "Null distribution of test-statistic",
xlab = "Test-statistic",
col = alpha("blue", 0.4),
breaks = c(-3,-2,-1,0,1,2,3,4))
par(mfrow=c(1,1))
hist(permu$perm_statistics,
main = "Null distribution of test-statistic",
xlab = "Test-statistic",
col = alpha("blue", 0.4),
breaks = c(-3,-2,-1,0,1,2,3,4,5))
par(mfrow=c(1,1))
hist(permu$perm_statistics,
main = "Null distribution of test-statistic",
xlab = "Test-statistic",
col = alpha("blue", 0.4),
breaks = c(-3,-2,-1,0,1,2,3,4))
23//5
23%%5
par(mfrow=c(1,1))
hist(permu$perm_statistics,
main = "Null distribution of test-statistic",
xlab = "Test-statistic",
col = alpha("blue", 0.4))
abline(v = unname(permu$statistic))
par(mfrow=c(1,1))
hist(permu$perm_statistics,
main = "Null distribution of test-statistic",
xlab = "Permuted test-statistic",
col = alpha("blue", 0.4))
abline(v = unname(permu$statistic))
par(mfrow=c(1,2))
hist(permu$data$Observations[permu$data$Group==unique(permu$data$Group)[1]],
main = "Group 1",
xlab = "Observations",
col = alpha("red", 0.4))
abline(v = unname(permu$estimate[1]),
col = "red",
lty = "dashed",
lwd = 2)
hist(permu$data$Observations[permu$data$Group==unique(permu$data$Group)[2]],
main = "Group 2",
xlab = "Observations",
col = alpha("blue", 0.4))
abline(v = unname(permu$estimate[2]),
col = "blue",
lty = "dashed",
lwd = 2)
mtext(paste(names(permu$null.value),"test:",round(permu$statistic,2)), side = 3, line = -2, outer = TRUE)
par(mfrow=c(1,1))
hist(permu$perm_statistics,
main = "Null distribution of test-statistic",
xlab = "Permuted test-statistic",
col = alpha("blue", 0.4))
abline(v = unname(permu$statistic))
library(Sampling)
data("BloodPressure")
BloodPressure
perm <- permutation(BloodPressure$Group, BloodPressure$Blood_pressure, nPerm = 1000)
plot(perm)
?tibble
BloodPressure %>% group_by(Group) %>% summarise(mean(Observations))
BloodPressure %>% group_by(Group) %>% summarise(mean(BloodPressure))
BloodPressure %>% group_by(Group) %>% summarise(mean(Blood_pressure))
levels(BloodPressure$Group)
names(BloodPressure$Group)
unique(BloodPressure$Group)
BloodPressure$Group == unique(BloodPressure$Group)[0]
BloodPressure$Group == unique(BloodPressure$Group)[1]
hej = (BloodPressure$Group == unique(BloodPressure$Group)[1])
which(BloodPressure$Group == unique(BloodPressure$Group)[1])
BloodPressure$Blood_pressure[1]
mean(BloodPressure$Blood_pressure[which(BloodPressure$Group == unique(BloodPressure$Group)[1])])
data = tibble("Group" = BloodPressure$Group, "Observations" = BloodPressure$Blood_pressure)
data
tible(Group = unique(data$Group),
Val = c(mean(data$Observations[which(data$Group == unique(data$Group)[1])]),
mean(data$Observations[which(data$Group == unique(data$Group)[2])])))
tibble(Group = unique(data$Group),
Val = c(mean(data$Observations[which(data$Group == unique(data$Group)[1])]),
mean(data$Observations[which(data$Group == unique(data$Group)[2])])))
test_data <- data %>%
group_by(Group) %>%
summarise(Val = fun(Observations))
data %>%
group_by(Group) %>%
summarise(Val = mean(Observations))
tibble(Group = unique(data$Group),
Val = c(mean(data$Observations[which(data$Group == unique(data$Group)[1])]),
mean(data$Observations[which(data$Group == unique(data$Group)[2])])))
test_data <- tibble(Group = unique(data$Group),
Val = c(fun(data$Observations[which(data$Group == unique(data$Group)[1])]),
fun(data$Observations[which(data$Group == unique(data$Group)[2])])))
test_data <- tibble(Group = unique(data$Group),
Val = c(mean(data$Observations[which(data$Group == unique(data$Group)[1])]),
mean(data$Observations[which(data$Group == unique(data$Group)[2])])))
View(test_data)
estimate[1] = test_data$Val[1]
estimate = c("mean of x" = 0, "mean of y" = 0)
estimate[1] = test_data$Val[1]
estimate[2] = test_data$Val[2]
estimate
estimate = c("mean of group1" = 0, "mean of group2" = 0)
test_data <- tibble(Group = unique(data$Group),
Val = c(fun(data$Observations[which(data$Group == unique(data$Group)[1])]),
fun(data$Observations[which(data$Group == unique(data$Group)[2])])))
estimate[1] = test_data$Val[1]
estimate[2] = test_data$Val[2]
estimate
estimate = c("mean_of_group1" = 0, "mean_of_group2" = 0)
estimate[1] = test_data$Val[1]
estimate[2] = test_data$Val[2]
estimate
diff(test_data$Val)
obs_test_stat <- abs(diff(test_data$Val))
abs(diff(test_data$Val))
perm_test_values = rep(NA,nPerm)
perm_test_values = rep(NA,10)
perm_data =
cbind.data.frame(Group = sample(c(data[[1]]), replace = FALSE),
Value= c(data[[2]]))
perm_data
?diff
perm_test_data <- tibble(Group = unique(perm_data$Group),
Val = c(fun(perm_data$Value[which(perm_data$Group == unique(perm_data$Group)[1])]),
fun(perm_data$Value[which(perm_data$Group == unique(perm_data$Group)[2])])))
perm_test_data <- tibble(Group = unique(perm_data$Group),
Val = c(mean(perm_data$Value[which(perm_data$Group == unique(perm_data$Group)[1])]),
mean(perm_data$Value[which(perm_data$Group == unique(perm_data$Group)[2])])))
perm_test_data
perm_test_val <- abs(diff(perm_test_data$Val))
library(Sampling)
data("BloodPressure")
perm <- permutation(BloodPressure$Group, BloodPressure$Blood_pressure, nPerm = 20)
perm
class(perm)
summary(perm)
plot(perm)
print(perm)
library(Sampling)
perm <- permutation(BloodPressure$Group, BloodPressure$Blood_pressure, nPerm = 20)
class(perm)
summary(perm)
plot(perm)
print(perm)
library(Sampling)
data("BloodPressure")
perm <- permutation(BloodPressure$Group, BloodPressure$Blood_pressure)
?tibblw
?tibble
as.data.frame()
?as.data.frame()
?data.frame
data = data.frame("Group" = BloodPressure$Group, "Observations" = BloodPressure$Blood_pressure)
data
data$Group
data$Observations
data = as.data.frame("Group" = BloodPressure$Group, "Observations" = BloodPressure$Blood_pressure)
data = data_frame("Group" = BloodPressure$Group, "Observations" = BloodPressure$Blood_pressure)
data = data.frame("Group" = BloodPressure$Group, "Observations" = BloodPressure$Blood_pressure)
library(Sampling)
data("BloodPressure")
perm <- permutation(groups = BloodPressure$Group, observations = BloodPressure$Blood_pressure)
class(perm)
summary(perm)
plot(perm)
print(perm)
?permutation
?Sampling
View(perm)
perm$estimate
perm$statistic
perm$p.value
type(perm$p.value)
str(perm$p.value)
summary(perm)
![](../Summary.png)
library(Sampling)
perm <- permutation(groups = BloodPressure$Group, observations = BloodPressure$Blood_pressure)
plot(perm)
summary(perm)
print(perm)
perm$perm_statistics
sum(perm$perm_statistics >=perm$statistic)
sum(perm$perm_statistics >=abs(perm$statistic))
sum(abs(perm$perm_statistics) >=perm$statistic)
perm$statistic
sum(abs(perm$perm_statistics) >=abs(perm$statistic))
sum(abs(perm$perm_statistics) >=abs(perm$statistic))/10^5
*2
(sum(abs(perm$perm_statistics) >=abs(perm$statistic))/10^5)*2
library(Sampling)
perm <- permutation(groups = BloodPressure$Group, observations = BloodPressure$Blood_pressure)
plot(perm)
summary(perm)
print(perm)
class(perm)
permutation(BloodPressure$Group, BloodPressure$Blood_pressure, method = "hej", nPerm = 10)
perm <- permutation(BloodPressure$Group, BloodPressure$Blood_pressure, method = "hej", nPerm = 10)
perm$null.value
perm$Warnings
library(Sampling)
perm <- permutation(BloodPressure$Group, BloodPressure$Blood_pressure, method = "hej", nPerm = 10)
perm <- permutation(BloodPressure$Group, BloodPressure$Blood_pressure, method = "median", nPerm = 10)
library(Sampling)
perm <- permutation(BloodPressure$Group, BloodPressure$Blood_pressure, method = "median", nPerm = 10)
perm$null.value
summary(perm)
print(perm)
plot(perm)
View(perm)
permutation <- function(groups, observations, method = "mean", nPerm = 10^5) {
data = data.frame("Group" = groups, "Observations" = observations)
if (method == "mean" ) {
null.value = c("Difference in mean" = 0)
fun = mean
estimate = c("mean_of_group1" = 0, "mean_of_group2" = 0)
}
else if (method == "median") {
null.value = c("Difference in median" = 0)
fun = median
estimate = c("median_of_group1" = 0, "median_of_group2" = 0)
}
else if (method == "my_method") {
null.value = c("my_method" = 0)
fun = my_method
estimate = c("my_method_of_group1" = 0, "my_method_of_group2" = 0)
}
else {
return(print("Method to calculate test-statistic not known. See description for further help."))
}
test_data <- data.frame(Group = unique(data$Group),
Val = c(fun(data$Observations[which(data$Group == unique(data$Group)[1])]),
fun(data$Observations[which(data$Group == unique(data$Group)[2])])))
estimate[1] = test_data$Val[1]
estimate[2] = test_data$Val[2]
obs_test_stat <- diff(test_data$Val)
perm_test_values = rep(NA,nPerm)
for (p in seq(1:nPerm)) {
perm_data =
cbind.data.frame(Group = sample(c(data[[1]]), replace = FALSE),
Value= c(data[[2]]))
perm_test_data <- data.frame(Group = unique(perm_data$Group),
Val = c(fun(perm_data$Value[which(perm_data$Group == unique(perm_data$Group)[1])]),
fun(perm_data$Value[which(perm_data$Group == unique(perm_data$Group)[2])])))
perm_test_val <- diff(perm_test_data$Val)
perm_test_values[p] <- perm_test_val
}
p.value = (sum(abs(perm_test_values) >= abs(obs_test_stat))/nPerm)*2
if (p.value == 0) {
warn = "Warning" = "nPerm was to low to get any permuted test statistics equal to or more extreme than your observed"
return(output(data = data,
null.value = null.value,
estimate = estimate,
data.name = "Groups and observations",
statistic = c("statistic" = obs_test_stat),
perm_statistics = perm_test_values,
p.value = p.value,
fun = fun,
Warnings = warn))
}
return(output(data = data,
null.value = null.value,
estimate = estimate,
data.name = "Groups and observations",
statistic = c("Test statistic" = obs_test_stat),
perm_statistics = perm_test_values,
p.value = p.value,
fun = fun))
}
# Calling plot on permutation
plot.permutation <- function(permutation) {
if (permutation$Warnings != "None") {
print("Warning" = "nPerm was to low to get any permuted test statistics equal to or more extreme than your observed")
}
if (nzchar(system.file(package = "ggplot2")) == TRUE) {
library(ggplot2)
plot(ggplot(permutation$data) +
geom_histogram(aes(x = Observations, fill=Group),
alpha = 0.6, bins = 50, color = "white") +
geom_vline(aes(xintercept=unname(permutation$estimate[1])),
size = 0.8, linetype="dashed", color = "red") +
geom_vline(aes(xintercept=unname(permutation$estimate[2])),
size = 0.8, linetype="dashed", color = "blue") +
annotate(geom="text", x = Inf,y=Inf,
label=paste(names(permutation$null.value),"test:",round(permutation$statistic,2)),
size = 4,
vjust=2, hjust=1) +
scale_fill_manual(values = c("red", "blue")) +
theme_bw(base_size = 15) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "The observed values",
y = "Counts"))
plot(ggplot() +
geom_histogram(aes(x = permutation$perm_statistics),
bins = 50,
color = "white",
fill = "blue",
alpha = 0.6) +
geom_vline(aes(xintercept = unname(permutation$statistic), color = "Observed\ntest-stat"),
size = 0.8, linetype = "dashed") +
scale_color_manual(values = c("Observed\ntest-stat" = "red")) +
theme_bw(base_size = 15) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Null distribution of test-statistic",
x = "Permuted test-statistic",
y = "Counts"))
}
else {
par(mfrow=c(1,2))
hist(permutation$data$Observations[permutation$data$Group==unique(permutation$data$Group)[1]],
main = "Group 1",
xlab = "Observations",
col = alpha("red", 0.4))
abline(v = unname(permutation$estimate[1]),
col = "red",
lty = "dashed",
lwd = 2)
hist(permutation$data$Observations[permutation$data$Group==unique(permutation$data$Group)[2]],
main = "Group 2",
xlab = "Observations",
col = alpha("blue", 0.4))
abline(v = unname(permutation$estimate[2]),
col = "blue",
lty = "dashed",
lwd = 2)
mtext(paste(names(permutation$null.value),"test:",round(permutation$statistic,2)), side = 3, line = -2, outer = TRUE)
par(mfrow=c(1,1))
hist(permutation$perm_statistics,
main = "Null distribution of test-statistic",
xlab = "Permuted test-statistic",
col = alpha("blue", 0.4))
abline(v = unname(permutation$statistic))
}
}
perm <- permutation(BloodPressure$Group, BloodPressure$Blood_pressure, method = "median", nPerm = 10)
plot(perm)
# Calling plot on permutation
plot.permutation <- function(permutation) {
#  if (permutation$Warnings != "None") {
#   print("Warning" = "nPerm was to low to get any permuted test statistics equal to or more extreme than your observed")
#}
if (nzchar(system.file(package = "ggplot2")) == TRUE) {
library(ggplot2)
plot(ggplot(permutation$data) +
geom_histogram(aes(x = Observations, fill=Group),
alpha = 0.6, bins = 50, color = "white") +
geom_vline(aes(xintercept=unname(permutation$estimate[1])),
size = 0.8, linetype="dashed", color = "red") +
geom_vline(aes(xintercept=unname(permutation$estimate[2])),
size = 0.8, linetype="dashed", color = "blue") +
annotate(geom="text", x = Inf,y=Inf,
label=paste(names(permutation$null.value),"test:",round(permutation$statistic,2)),
size = 4,
vjust=2, hjust=1) +
scale_fill_manual(values = c("red", "blue")) +
theme_bw(base_size = 15) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "The observed values",
y = "Counts"))
plot(ggplot() +
geom_histogram(aes(x = permutation$perm_statistics),
bins = 50,
color = "white",
fill = "blue",
alpha = 0.6) +
geom_vline(aes(xintercept = unname(permutation$statistic), color = "Observed\ntest-stat"),
size = 0.8, linetype = "dashed") +
scale_color_manual(values = c("Observed\ntest-stat" = "red")) +
theme_bw(base_size = 15) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Null distribution of test-statistic",
x = "Permuted test-statistic",
y = "Counts"))
}
else {
par(mfrow=c(1,2))
hist(permutation$data$Observations[permutation$data$Group==unique(permutation$data$Group)[1]],
main = "Group 1",
xlab = "Observations",
col = alpha("red", 0.4))
abline(v = unname(permutation$estimate[1]),
col = "red",
lty = "dashed",
lwd = 2)
hist(permutation$data$Observations[permutation$data$Group==unique(permutation$data$Group)[2]],
main = "Group 2",
xlab = "Observations",
col = alpha("blue", 0.4))
abline(v = unname(permutation$estimate[2]),
col = "blue",
lty = "dashed",
lwd = 2)
mtext(paste(names(permutation$null.value),"test:",round(permutation$statistic,2)), side = 3, line = -2, outer = TRUE)
par(mfrow=c(1,1))
hist(permutation$perm_statistics,
main = "Null distribution of test-statistic",
xlab = "Permuted test-statistic",
col = alpha("blue", 0.4))
abline(v = unname(permutation$statistic))
}
}
# Calling plot on permutation
plot.permutation <- function(permutation) {
#  if (permutation$Warnings != "None") {
#   print("Warning" = "nPerm was to low to get any permuted test statistics equal to or more extreme than your observed")
#}
if (nzchar(system.file(package = "ggplot2")) == TRUE) {
library(ggplot2)
plot(ggplot(permutation$data) +
geom_histogram(aes(x = Observations, fill=Group),
alpha = 0.6, bins = 50, color = "white") +
geom_vline(aes(xintercept=unname(permutation$estimate[1])),
size = 0.8, linetype="dashed", color = "red") +
geom_vline(aes(xintercept=unname(permutation$estimate[2])),
size = 0.8, linetype="dashed", color = "blue") +
annotate(geom="text", x = Inf,y=Inf,
label=paste(names(permutation$null.value),"test:",round(permutation$statistic,2)),
size = 4,
vjust=2, hjust=1) +
scale_fill_manual(values = c("red", "blue")) +
theme_bw(base_size = 15) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "The observed values",
y = "Counts"))
plot(ggplot() +
geom_histogram(aes(x = permutation$perm_statistics),
bins = 50,
color = "white",
fill = "blue",
alpha = 0.6) +
geom_vline(aes(xintercept = unname(permutation$statistic), color = "Observed\ntest-stat"),
size = 0.8, linetype = "dashed") +
scale_color_manual(values = c("Observed\ntest-stat" = "red")) +
theme_bw(base_size = 15) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Null distribution of test-statistic",
x = "Permuted test-statistic",
y = "Counts"))
}
else {
par(mfrow=c(1,2))
hist(permutation$data$Observations[permutation$data$Group==unique(permutation$data$Group)[1]],
main = "Group 1",
xlab = "Observations",
col = alpha("red", 0.4))
abline(v = unname(permutation$estimate[1]),
col = "red",
lty = "dashed",
lwd = 2)
hist(permutation$data$Observations[permutation$data$Group==unique(permutation$data$Group)[2]],
main = "Group 2",
xlab = "Observations",
col = alpha("blue", 0.4))
abline(v = unname(permutation$estimate[2]),
col = "blue",
lty = "dashed",
lwd = 2)
mtext(paste(names(permutation$null.value),"test:",round(permutation$statistic,2)), side = 3, line = -2, outer = TRUE)
par(mfrow=c(1,1))
hist(permutation$perm_statistics,
main = "Null distribution of test-statistic",
xlab = "Permuted test-statistic",
col = alpha("blue", 0.4))
abline(v = unname(permutation$statistic))
}
}
perm <- permutation(BloodPressure$Group, BloodPressure$Blood_pressure, method = "median", nPerm = 10)
plot(perm)
print(perm)
summary(perm)
# Calling the summary on permutation
summary.permutation <- function(permutation) {
print(permutation$method)
print(permutation$estimate)
print(permutation$statistic)
print(paste("Permuted p-value:", permutation$p.value))
if (permutation$Warnings != "None") {
print(paste("Warning!!",permutation$Warnings))
}
}
summary(perm)
