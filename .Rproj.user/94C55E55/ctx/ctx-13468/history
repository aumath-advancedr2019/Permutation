library(PackageProject)
?hello
library(PackageProject)
?hello
?permutation
data <- tibble(Group = c(rep("ctrl",100),rep("case",100)),
Blood_pressure=(c(rnorm(100,mean=120,sd=20),
rnorm(100,mean = 115,sd=15))))
library(PackageProject)
?permutation
data <- tibble(Group = c(rep("ctrl",100),rep("case",100)),
Blood_pressure=(c(rnorm(100,mean=120,sd=20),
rnorm(100,mean = 115,sd=15))))
data <- cbind(Group = c(rep("ctrl",100),rep("case",100)),
Blood_pressure=(c(rnorm(100,mean=120,sd=20),
rnorm(100,mean = 115,sd=15))))
View(data)
as.data.frame(data)
data1 = as.data.frame(data)
View(data1)
permutation(groups = data1$Group, observations = data1$Blood_pressure, nPerm = 10)
library(tidyverse)
permutation(groups = data1$Group, observations = data1$Blood_pressure, nPerm = 10)
data <- tibble(Group = c(rep("ctrl",100),rep("case",100)),
Blood_pressure=(c(rnorm(100,mean=120,sd=20),
rnorm(100,mean = 115,sd=15))))
permutation(groups = data$Group, observations = data$Blood_pressure, nPerm = 10)
str(data1$Blood_pressure)
str(data1$Group)
View(data)
BloodPressure <- tibble(Group = c(rep("ctrl",100),rep("case",100)),
Blood_pressure=(c(rnorm(100,mean=120,sd=20),
rnorm(100,mean = 115,sd=15))))
save(BloodPressure, file="data/BloodPressure.RData")
library(PackageProject)
?BloodPressure
data("BloodPressure")
force(BloodPressure)
library(PackageProject)
?permutation
permutation(group = BloodPressure$Group, observations = BloodPressure$Blood_pressure)
devtools::install(build_vignettes = TRUE)
library(PackageProject)
?permutation
?PackageProject
devtools::use_vignette("Permutation")
devtools::use_vignette("permutation")
devtools::install(build_vignettes = TRUE)
usethis::use_vignette("permutatino")
usethis::use_vignette("permutation")
permutation(group = BloodPressure$Group, observations = BloodPressure$Blood_pressure, test_statistic = "mean", nPerm = 10^5, plot = TRUE)
getwd()
data("BloodPressure")
perm <- permutation(BloodPressure$Group, BloodPressure$Blood_pressure)
# Defining class "permutation"
output <- function(data = tibble(),
Method = "Unknown",
fun = "mean",
obs_Test_stat = 0,
perm_test_values = 0,
perm_p_value = 0,
Warnings = "None") {
value <- list(data = data,
Method = Method,
fun = fun,
ObsTestStat = obs_Test_stat,
PermTestValues = perm_test_values,
PermPvalue = perm_p_value,
Warnings = Warnings)
attr(value,"class") <- "permutation"
value
}
# Calling the summary on permutation
summary.permutation <- function(permutation) {
print(permutation$data %>% group_by(Group) %>% summarise(Method = permutation$fun(Observations)))
print(paste("Method:", permutation$Method))
print(paste("Observed test-statistic:", permutation$ObsTestStat))
print(paste("Permuted p-value:", permutation$PermPvalue))
if (permutation$Warnings != "None") {
print(paste("Warnings!!",permutation$Warnings))
}
}
# Calling plot on permutation
plot.permutation <- function(permutation) {
test_data <- permutation$data %>%
group_by(Group) %>%
summarise(Val = permutation$fun(Observations))
plot(ggplot(permutation$data) +
geom_histogram(aes(x = Observations, fill=Group),
alpha = 0.6, bins = 50, color = "white") +
geom_vline(data=test_data,
aes(xintercept=Val,
color=Group),
size = 0.8, linetype="dashed") +
annotate(geom="text", x = Inf,y=Inf,
label=paste(permutation$Method,"test:",round(permutation$ObsTestStat,2)),
size = 4,
vjust=2, hjust=1) +
theme_bw(base_size = 15) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "The observed values",
y = "Counts"))
plot(ggplot() +
geom_histogram(aes(x = permutation$PermTestValues),
bins = 50,
color = "white",
fill = "blue",
alpha = 0.6) +
geom_vline(aes(xintercept = permutation$ObsTestStat, color = "Observed\ntest-stat"),
size = 0.8, linetype = "dashed") +
scale_color_manual(values = c("Observed\ntest-stat" = "red")) +
theme_bw(base_size = 15) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "The null distribution for the test-statistic",
x = "test_statistic",
y = "Counts"))
}
permutation <- function(groups, observations, test_statistic = "mean", nPerm = 10^5) {
data = tibble("Group" = groups, "Observations" = observations)
if (test_statistic == "mean" ) {
test_statistic = "Difference in mean"
fun = mean
}
else if (test_statistic == "median") {
test_statistic = "Difference in median"
fun = median
}
else if (test_statistic == "my_method") {
test_statistic = "my_method"
fun = my_method
}
else {
return(output(Warnings = "Test-statistic method not known for function.
See description for further help."))
}
test_data <- data %>%
group_by(Group) %>%
summarise(Val = fun(Observations))
obs_test_stat <- diff(test_data$Val)
perm_test_values = rep(NA,nPerm)
for (p in seq(1:nPerm)) {
perm_data =
cbind.data.frame(Group = sample(c(data[[1]]), replace = FALSE),
Value= c(data[[2]]))
perm_test_val <- perm_data %>%
group_by(Group) %>%
summarise(val = fun(Value)) %>%
.$val %>%
diff()
perm_test_values[p] <- perm_test_val
}
p.value = (sum(abs(perm_test_values) >= obs_test_stat)/nPerm)*2
if (p.value == 0) {
warn = "Warning" = "nPerm was to low to get any permuted test statistics equal to or more extreme than your observed"
return(output(data = data,
Method = test_statistic,
fun = fun,
obs_Test_stat = obs_test_stat,
all_perm_p_values = perm_test_values,
perm_p_value = p.value,
Warnings = warn))
}
return(output(data = data,
Method = test_statistic,
fun = fun,
obs_Test_stat = obs_test_stat,
all_perm_p_values = perm_test_values,
perm_p_value = p.value))
}
perm <- permutation(BloodPressure$Group, BloodPressure$Blood_pressure)
library(tidyverse)
perm <- permutation(BloodPressure$Group, BloodPressure$Blood_pressure)
permutation <- function(groups, observations, test_statistic = "mean", nPerm = 10^5) {
data = tibble("Group" = groups, "Observations" = observations)
if (test_statistic == "mean" ) {
test_statistic = "Difference in mean"
fun = mean
}
else if (test_statistic == "median") {
test_statistic = "Difference in median"
fun = median
}
else if (test_statistic == "my_method") {
test_statistic = "my_method"
fun = my_method
}
else {
return(output(Warnings = "Test-statistic method not known for function.
See description for further help."))
}
test_data <- data %>%
group_by(Group) %>%
summarise(Val = fun(Observations))
obs_test_stat <- diff(test_data$Val)
perm_test_values = rep(NA,nPerm)
for (p in seq(1:nPerm)) {
perm_data =
cbind.data.frame(Group = sample(c(data[[1]]), replace = FALSE),
Value= c(data[[2]]))
perm_test_val <- perm_data %>%
group_by(Group) %>%
summarise(val = fun(Value)) %>%
.$val %>%
diff()
perm_test_values[p] <- perm_test_val
}
p.value = (sum(abs(perm_test_values) >= obs_test_stat)/nPerm)*2
if (p.value == 0) {
warn = "Warning" = "nPerm was to low to get any permuted test statistics equal to or more extreme than your observed"
return(output(data = data,
Method = test_statistic,
fun = fun,
obs_Test_stat = obs_test_stat,
perm_test_values = perm_test_values,
perm_p_value = p.value,
Warnings = warn))
}
return(output(data = data,
Method = test_statistic,
fun = fun,
obs_Test_stat = obs_test_stat,
perm_test_values = perm_test_values,
perm_p_value = p.value))
}
perm <- permutation(BloodPressure$Group, BloodPressure$Blood_pressure)
plot(perm)
summary(perm)
print(perm)
perm
perm$data
plot(perm)
summary(perm)
library(PackageProject)
?bootstrap
?permutation
