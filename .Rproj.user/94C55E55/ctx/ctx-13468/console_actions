{
    "data" : [
        "\nR version 3.6.1 (2019-07-05) -- \"Action of the Toes\"\nCopyright (C) 2019 The R Foundation for Statistical Computing\nPlatform: x86_64-apple-darwin15.6.0 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "data(\"BloodPressure\")",
        "> ",
        "perm <- permutation(BloodPressure$Group, BloodPressure$Blood_pressure)",
        "Error in permutation(BloodPressure$Group, BloodPressure$Blood_pressure) : \n  could not find function \"permutation\"\n",
        "> ",
        "# Defining class \"permutation\"",
        "> ",
        "output <- function(data = tibble(),",
        "+ ",
        "                   Method = \"Unknown\",",
        "+ ",
        "                   fun = \"mean\",",
        "+ ",
        "                   obs_Test_stat = 0,",
        "+ ",
        "                   perm_test_values = 0,",
        "+ ",
        "                   perm_p_value = 0,",
        "+ ",
        "                   Warnings = \"None\") {",
        "+ ",
        "  value <- list(data = data,",
        "+ ",
        "                Method = Method,",
        "+ ",
        "                fun = fun,",
        "+ ",
        "                ObsTestStat = obs_Test_stat,",
        "+ ",
        "                PermTestValues = perm_test_values,",
        "+ ",
        "                PermPvalue = perm_p_value,",
        "+ ",
        "                Warnings = Warnings)",
        "+ ",
        "  attr(value,\"class\") <- \"permutation\"",
        "+ ",
        "  value",
        "+ ",
        "}",
        "> ",
        "# Calling the summary on permutation",
        "> ",
        "summary.permutation <- function(permutation) {",
        "+ ",
        "  print(permutation$data %>% group_by(Group) %>% summarise(Method = permutation$fun(Observations)))",
        "+ ",
        "  print(paste(\"Method:\", permutation$Method))",
        "+ ",
        "  print(paste(\"Observed test-statistic:\", permutation$ObsTestStat))",
        "+ ",
        "  print(paste(\"Permuted p-value:\", permutation$PermPvalue))",
        "+ ",
        "  if (permutation$Warnings != \"None\") {",
        "+ ",
        "    print(paste(\"Warnings!!\",permutation$Warnings))",
        "+ ",
        "  }",
        "+ ",
        "}",
        "> ",
        "# Calling plot on permutation",
        "> ",
        "plot.permutation <- function(permutation) {",
        "+ ",
        "  test_data <- permutation$data %>%",
        "+ ",
        "    group_by(Group) %>%",
        "+ ",
        "    summarise(Val = permutation$fun(Observations))",
        "+ ",
        "",
        "+ ",
        "  plot(ggplot(permutation$data) +",
        "+ ",
        "         geom_histogram(aes(x = Observations, fill=Group),",
        "+ ",
        "                        alpha = 0.6, bins = 50, color = \"white\") +",
        "+ ",
        "         geom_vline(data=test_data,",
        "+ ",
        "                    aes(xintercept=Val,",
        "+ ",
        "                        color=Group),",
        "+ ",
        "                    size = 0.8, linetype=\"dashed\") +",
        "+ ",
        "         annotate(geom=\"text\", x = Inf,y=Inf,",
        "+ ",
        "                  label=paste(permutation$Method,\"test:\",round(permutation$ObsTestStat,2)),",
        "+ ",
        "                  size = 4,",
        "+ ",
        "                  vjust=2, hjust=1) +",
        "+ ",
        "         theme_bw(base_size = 15) +",
        "+ ",
        "         theme(plot.title = element_text(hjust = 0.5)) +",
        "+ ",
        "         labs(title = \"The observed values\",",
        "+ ",
        "              y = \"Counts\"))",
        "+ ",
        "",
        "+ ",
        "  plot(ggplot() +",
        "+ ",
        "         geom_histogram(aes(x = permutation$PermTestValues),",
        "+ ",
        "                        bins = 50,",
        "+ ",
        "                        color = \"white\",",
        "+ ",
        "                        fill = \"blue\",",
        "+ ",
        "                        alpha = 0.6) +",
        "+ ",
        "         geom_vline(aes(xintercept = permutation$ObsTestStat, color = \"Observed\\ntest-stat\"),",
        "+ ",
        "                    size = 0.8, linetype = \"dashed\") +",
        "+ ",
        "         scale_color_manual(values = c(\"Observed\\ntest-stat\" = \"red\")) +",
        "+ ",
        "         theme_bw(base_size = 15) +",
        "+ ",
        "         theme(plot.title = element_text(hjust = 0.5)) +",
        "+ ",
        "         labs(title = \"The null distribution for the test-statistic\",",
        "+ ",
        "              x = \"test_statistic\",",
        "+ ",
        "              y = \"Counts\"))",
        "+ ",
        "}",
        "> ",
        "permutation <- function(groups, observations, test_statistic = \"mean\", nPerm = 10^5) {",
        "+ ",
        "  data = tibble(\"Group\" = groups, \"Observations\" = observations)",
        "+ ",
        "",
        "+ ",
        "  if (test_statistic == \"mean\" ) {",
        "+ ",
        "    test_statistic = \"Difference in mean\"",
        "+ ",
        "    fun = mean",
        "+ ",
        "  }",
        "+ ",
        "  else if (test_statistic == \"median\") {",
        "+ ",
        "    test_statistic = \"Difference in median\"",
        "+ ",
        "    fun = median",
        "+ ",
        "  }",
        "+ ",
        "  else if (test_statistic == \"my_method\") {",
        "+ ",
        "    test_statistic = \"my_method\"",
        "+ ",
        "    fun = my_method",
        "+ ",
        "  }",
        "+ ",
        "  else {",
        "+ ",
        "    return(output(Warnings = \"Test-statistic method not known for function.",
        "+ ",
        "                 See description for further help.\"))",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  test_data <- data %>%",
        "+ ",
        "    group_by(Group) %>%",
        "+ ",
        "    summarise(Val = fun(Observations))",
        "+ ",
        "",
        "+ ",
        "  obs_test_stat <- diff(test_data$Val)",
        "+ ",
        "",
        "+ ",
        "  perm_test_values = rep(NA,nPerm)",
        "+ ",
        "",
        "+ ",
        "  for (p in seq(1:nPerm)) {",
        "+ ",
        "    perm_data =",
        "+ ",
        "      cbind.data.frame(Group = sample(c(data[[1]]), replace = FALSE),",
        "+ ",
        "                       Value= c(data[[2]]))",
        "+ ",
        "",
        "+ ",
        "    perm_test_val <- perm_data %>%",
        "+ ",
        "      group_by(Group) %>%",
        "+ ",
        "      summarise(val = fun(Value)) %>%",
        "+ ",
        "      .$val %>%",
        "+ ",
        "      diff()",
        "+ ",
        "",
        "+ ",
        "    perm_test_values[p] <- perm_test_val",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  p.value = (sum(abs(perm_test_values) >= obs_test_stat)/nPerm)*2",
        "+ ",
        "",
        "+ ",
        "  if (p.value == 0) {",
        "+ ",
        "    warn = \"Warning\" = \"nPerm was to low to get any permuted test statistics equal to or more extreme than your observed\"",
        "+ ",
        "    return(output(data = data,",
        "+ ",
        "                  Method = test_statistic,",
        "+ ",
        "                  fun = fun,",
        "+ ",
        "                  obs_Test_stat = obs_test_stat,",
        "+ ",
        "                  all_perm_p_values = perm_test_values,",
        "+ ",
        "                  perm_p_value = p.value,",
        "+ ",
        "                  Warnings = warn))",
        "+ ",
        "  }",
        "+ ",
        "  return(output(data = data,",
        "+ ",
        "                Method = test_statistic,",
        "+ ",
        "                fun = fun,",
        "+ ",
        "                obs_Test_stat = obs_test_stat,",
        "+ ",
        "                all_perm_p_values = perm_test_values,",
        "+ ",
        "                perm_p_value = p.value))",
        "+ ",
        "}",
        "> ",
        "perm <- permutation(BloodPressure$Group, BloodPressure$Blood_pressure)",
        "Error in tibble(Group = groups, Observations = observations) : \n  could not find function \"tibble\"\n",
        "> ",
        "library(tidyverse)",
        "[30mâ”€â”€ [1mAttaching packages[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 1.2.1 â”€â”€[39m\n",
        "[30m[32mâœ”[30m [34mggplot2[30m 3.2.1     [32mâœ”[30m [34mpurrr  [30m 0.3.2\n[32mâœ”[30m [34mtibble [30m 2.1.3     [32mâœ”[30m [34mdplyr  [30m 0.8.3\n[32mâœ”[30m [34mtidyr  [30m 1.0.0     [32mâœ”[30m [34mstringr[30m 1.4.0\n[32mâœ”[30m [34mreadr  [30m 1.3.1     [32mâœ”[30m [34mforcats[30m 0.4.0[39m\n",
        "[30mâ”€â”€ [1mConflicts[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€\n[31mâœ–[30m [34mdplyr[30m::[32mfilter()[30m masks [34mstats[30m::filter()\n[31mâœ–[30m [34mdplyr[30m::[32mlag()[30m    masks [34mstats[30m::lag()[39m\n",
        "> ",
        "perm <- permutation(BloodPressure$Group, BloodPressure$Blood_pressure)",
        "Error in output(data = data, Method = test_statistic, fun = fun, obs_Test_stat = obs_test_stat,  : \n  unused argument (all_perm_p_values = perm_test_values)\n",
        "> ",
        "permutation <- function(groups, observations, test_statistic = \"mean\", nPerm = 10^5) {",
        "+ ",
        "  data = tibble(\"Group\" = groups, \"Observations\" = observations)",
        "+ ",
        "",
        "+ ",
        "  if (test_statistic == \"mean\" ) {",
        "+ ",
        "    test_statistic = \"Difference in mean\"",
        "+ ",
        "    fun = mean",
        "+ ",
        "  }",
        "+ ",
        "  else if (test_statistic == \"median\") {",
        "+ ",
        "    test_statistic = \"Difference in median\"",
        "+ ",
        "    fun = median",
        "+ ",
        "  }",
        "+ ",
        "  else if (test_statistic == \"my_method\") {",
        "+ ",
        "    test_statistic = \"my_method\"",
        "+ ",
        "    fun = my_method",
        "+ ",
        "  }",
        "+ ",
        "  else {",
        "+ ",
        "    return(output(Warnings = \"Test-statistic method not known for function.",
        "+ ",
        "                 See description for further help.\"))",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  test_data <- data %>%",
        "+ ",
        "    group_by(Group) %>%",
        "+ ",
        "    summarise(Val = fun(Observations))",
        "+ ",
        "",
        "+ ",
        "  obs_test_stat <- diff(test_data$Val)",
        "+ ",
        "",
        "+ ",
        "  perm_test_values = rep(NA,nPerm)",
        "+ ",
        "",
        "+ ",
        "  for (p in seq(1:nPerm)) {",
        "+ ",
        "    perm_data =",
        "+ ",
        "      cbind.data.frame(Group = sample(c(data[[1]]), replace = FALSE),",
        "+ ",
        "                       Value= c(data[[2]]))",
        "+ ",
        "",
        "+ ",
        "    perm_test_val <- perm_data %>%",
        "+ ",
        "      group_by(Group) %>%",
        "+ ",
        "      summarise(val = fun(Value)) %>%",
        "+ ",
        "      .$val %>%",
        "+ ",
        "      diff()",
        "+ ",
        "",
        "+ ",
        "    perm_test_values[p] <- perm_test_val",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  p.value = (sum(abs(perm_test_values) >= obs_test_stat)/nPerm)*2",
        "+ ",
        "",
        "+ ",
        "  if (p.value == 0) {",
        "+ ",
        "    warn = \"Warning\" = \"nPerm was to low to get any permuted test statistics equal to or more extreme than your observed\"",
        "+ ",
        "    return(output(data = data,",
        "+ ",
        "                  Method = test_statistic,",
        "+ ",
        "                  fun = fun,",
        "+ ",
        "                  obs_Test_stat = obs_test_stat,",
        "+ ",
        "                  perm_test_values = perm_test_values,",
        "+ ",
        "                  perm_p_value = p.value,",
        "+ ",
        "                  Warnings = warn))",
        "+ ",
        "  }",
        "+ ",
        "  return(output(data = data,",
        "+ ",
        "                Method = test_statistic,",
        "+ ",
        "                fun = fun,",
        "+ ",
        "                obs_Test_stat = obs_test_stat,",
        "+ ",
        "                perm_test_values = perm_test_values,",
        "+ ",
        "                perm_p_value = p.value))",
        "+ ",
        "}",
        "> ",
        "perm <- permutation(BloodPressure$Group, BloodPressure$Blood_pressure)",
        "> ",
        "plot(perm)",
        "> ",
        "summary(perm)",
        "[38;5;246m# A tibble: 2 x 2[39m\n  Group Method\n  [3m[38;5;246m<chr>[39m[23m  [3m[38;5;246m<dbl>[39m[23m\n[38;5;250m1[39m case    114.\n[38;5;250m2[39m ctrl    119.\n[1] \"Method: Difference in mean\"\n[1] \"Observed test-statistic: 4.61065374068758\"\n[1] \"Permuted p-value: 0.0966\"\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "print(perm)",
        "<permutation () [0 x 2]> \n",
        "> ",
        "perm",
        "<permutation () [0 x 2]> \n",
        "> ",
        "perm$data",
        "[38;5;246m# A tibble: 200 x 2[39m\n   Group Observations\n   [3m[38;5;246m<chr>[39m[23m        [3m[38;5;246m<dbl>[39m[23m\n[38;5;250m 1[39m ctrl          85.1\n[38;5;250m 2[39m ctrl         106. \n[38;5;250m 3[39m ctrl         122. \n[38;5;250m 4[39m ctrl          78.6\n[38;5;250m 5[39m ctrl         133. \n[38;5;250m 6[39m ctrl         111. \n[38;5;250m 7[39m ctrl         139. \n[38;5;250m 8[39m ctrl         118. \n[38;5;250m 9[39m ctrl          97.1\n[38;5;250m10[39m ctrl         115. \n[38;5;246m# â€¦ with 190 more rows[39m\n",
        "> ",
        "plot(perm)",
        "> ",
        "summary(perm)",
        "[38;5;246m# A tibble: 2 x 2[39m\n  Group Method\n  [3m[38;5;246m<chr>[39m[23m  [3m[38;5;246m<dbl>[39m[23m\n[38;5;250m1[39m case    114.\n[38;5;250m2[39m ctrl    119.\n[1] \"Method: Difference in mean\"\n[1] \"Observed test-statistic: 4.61065374068758\"\n[1] \"Permuted p-value: 0.0966\"\n\nRestarting R session...\n\n",
        "> ",
        "library(PackageProject)",
        "\nAttaching package: â€˜PackageProjectâ€™\n\n",
        "The following object is masked _by_ â€˜.GlobalEnvâ€™:\n\n    output\n\n",
        "> ",
        "?bootstrap",
        "> ",
        "?permutation",
        "No documentation for â€˜permutationâ€™ in specified packages and libraries:\nyou could try â€˜??permutationâ€™\n\nRestarting R session...\n\n"
    ],
    "type" : [
        2,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        2
    ]
}